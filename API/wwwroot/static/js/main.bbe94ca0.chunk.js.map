{"version":3,"sources":["app/models/pagination.ts","app/models/activity.ts","app/api/agent.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","Activity","init","Object","assign","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","dzActive","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.bbe94ca0.chunk.js","sourcesContent":["export interface Pagination {\r\n  currentPage: number\r\n  itemsPerPage: number\r\n  totalItems: number\r\n  totalPages: number\r\n}\r\n\r\n// T can be an activity array\r\nexport class PaginatedResult<T> {\r\n  data: T\r\n  pagination: Pagination\r\n\r\n  constructor(data: T, pagination: Pagination) {\r\n    this.data = data\r\n    this.pagination = pagination\r\n  }\r\n}\r\n\r\nexport class PagingParams {\r\n  pageNumber\r\n  pageSize\r\n  constructor(pageNumber = 1, pageSize = 2) {\r\n    this.pageNumber = pageNumber\r\n    this.pageSize = pageSize\r\n  }\r\n}\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n  id: string\r\n  title: string\r\n  date: Date | null\r\n  description: string\r\n  category: string\r\n  city: string\r\n  venue: string\r\n  hostUsername: string\r\n  isCancelled: boolean\r\n  isGoing: boolean\r\n  isHost: boolean\r\n  host?: Profile\r\n  attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n  // populate all properties into activity\r\n  constructor(init?: ActivityFormValues) {\r\n    Object.assign(this, init)\r\n  }\r\n}\r\n\r\n// use a class to auto convert the activity object from API using constructor\r\nexport class ActivityFormValues {\r\n  // properties needed in the create activity form\r\n  id?: string = undefined\r\n  title: string = ''\r\n  category: string = ''\r\n  description: string = ''\r\n  date: Date | null = null\r\n  city: string = ''\r\n  venue: string = ''\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      // map to view model\r\n      this.id = activity.id\r\n      this.title = activity.title\r\n      this.category = activity.category\r\n      this.description = activity.description\r\n      this.date = activity.date\r\n      this.venue = activity.venue\r\n      this.city = activity.city\r\n    }\r\n  }\r\n}\r\n","import { PaginatedResult } from './../models/pagination';\r\nimport axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport { history } from '../..'\r\nimport { store } from '../stores/store'\r\nimport { Activity, ActivityFormValues } from '../models/activity'\r\nimport { User, UserFormValues } from '../models/user'\r\nimport { Photo, Profile, UserActivity } from '../models/profile'\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay)\r\n  })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\r\n\r\naxios.interceptors.request.use(config => {\r\n  const token = store.commonStore.token\r\n  if (token) config.headers.Authorization = `Bearer ${token}`\r\n  return config\r\n})\r\n\r\naxios.interceptors.response.use(\r\n  // interogate the response\r\n  async (response) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      await sleep(500)\r\n    }\r\n    // access the pagination header (a json string)\r\n    const pagination = response.headers['pagination']\r\n    if (pagination) {\r\n      response.data = new PaginatedResult(response.data, JSON.parse(pagination))\r\n      // \"any\" can be activity\r\n      return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    // if no pagination header, then it is a normal response\r\n    return response\r\n  },\r\n  (error: AxiosError) => {\r\n    const { data, status, config } = error.response!\r\n    switch (status) {\r\n      case 400:\r\n        if (typeof data === 'string') {\r\n          toast.error(data)\r\n        }\r\n        // case for invalid guid\r\n        if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n          history.push('/not-found')\r\n        }\r\n        if (data.errors) {\r\n          const modalStateErrors = []\r\n          for (const key in data.errors) {\r\n            if (data.errors[key]) {\r\n              modalStateErrors.push(data.errors[key])\r\n            }\r\n          }\r\n          // throw back to the component as a flattened list of strings\r\n          throw modalStateErrors.flat()\r\n        }\r\n        break\r\n      case 401:\r\n        toast.error('unauthorised')\r\n        break\r\n      case 404:\r\n        // use the custom history object outside React components\r\n        history.push('/not-found')\r\n        break\r\n      case 500:\r\n        store.commonStore.setServerError(data)\r\n        history.push('/server-error')\r\n        break\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// Adding TYPE SAFETY for response: what type of data will be returned from api\r\n// use generic type <T> for responseBody, <T> can be <Activity>, <User>, <Profile>...\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n  // in list(), <T> is <Activity[]>\r\n  list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n  // in details(), <T> is <Activity>\r\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n  // in following methods, <T> is <void>, meaning not return anything from request\r\n  create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n  update: (activity: ActivityFormValues) =>\r\n    requests.put<void>(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n  // attend activity: POST an empty object, and return viod\r\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n  current: () => requests.get<User>('/account'),\r\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n  register: (user: UserFormValues) =>\r\n    requests.post<User>('/account/register', user),\r\n}\r\n\r\n// object to get user's profile\r\nconst Profiles = {\r\n  // get method returns a promise containing Profile\r\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n  // upload photo to API\r\n  uploadPhoto: (file: Blob) => {\r\n    let formData = new FormData()\r\n    // 'File' needs to match the name of the property in API\r\n    formData.append('File', file)\r\n    // post request shall return a type of Photo from API\r\n    return axios.post<Photo>('photos', formData, {\r\n      headers: { 'Content-type': 'multipart/form-data' }\r\n    })\r\n  },\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n  // Note the use of Partial<Profile> as we are only allowing the user to update 2 of the properties contained in the Profile type.\r\n  updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n  // toggle follow/unfollow\r\n  updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n  // get a list of followers or followees, depending on the query string\r\n  listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n  // get activities by username and predicate (future, past, hosting)\r\n  listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = { Activities, Account, Profiles }\r\n\r\nexport default agent\r\n","import { User } from './user'\r\n\r\nexport interface Profile {\r\n  username: string\r\n  displayName: string\r\n  image?: string\r\n  bio?: string\r\n  followersCount: number\r\n  followingCount: number\r\n  following: boolean\r\n  photos?: Photo[]\r\n}\r\n\r\n// create a class, so that constructor can automatically set properties of the currently logged in user\r\n// convert the object type from User to Profile\r\nexport class Profile implements Profile {\r\n  constructor(user: User) {\r\n    this.username = user.username\r\n    this.displayName = user.displayName\r\n    this.image = user.image\r\n  }\r\n}\r\n\r\nexport interface Photo {\r\n  id: string\r\n  url: string\r\n  isMain: boolean\r\n}\r\n\r\nexport interface UserActivity {\r\n  id: string\r\n  title: string\r\n  category: string\r\n  date: Date\r\n}\r\n","import { Pagination, PagingParams } from '../models/pagination';\r\nimport { Activity, ActivityFormValues } from './../models/activity'\r\nimport { makeAutoObservable, reaction, runInAction } from 'mobx'\r\nimport agent from '../api/agent'\r\nimport { format } from 'date-fns'\r\nimport { store } from './store'\r\nimport { Profile } from '../models/profile'\r\n\r\nexport default class ActivityStore {\r\n  // MobX Observables: class properties\r\n  activityRegistry = new Map<string, Activity>() // initialise Map object: { id1: activity1, id2: activity2, ... }\r\n  selectedActivity: Activity | undefined = undefined\r\n  editMode = false\r\n  loading = false\r\n  loadingInitial = false\r\n  pagination: Pagination | null = null\r\n  pagingParams = new PagingParams()\r\n  predicate = new Map().set('all', true) // query param filters: all, startDate, isGogin, isHost; show all activities by default\r\n\r\n  constructor() {\r\n    // makeAutoObservable will auto convert class properties into MobX Observables, and methods into MobX Actions\r\n    makeAutoObservable(this)\r\n    // makeObservable(this, {\r\n    //   title: observable,\r\n    //   setTitle: action\r\n    // })\r\n\r\n    // force the page to react to change in predicate (query param filters)\r\n    reaction(\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.pagingParams = new PagingParams()\r\n        this.activityRegistry.clear()\r\n        this.loadActivities() // this takes axiosParams\r\n      }\r\n    )\r\n  }\r\n\r\n  setPagingParams = (pagingParams: PagingParams) => {\r\n    this.pagingParams = pagingParams\r\n  }\r\n\r\n  setPredicate = (predicate: string, value: string | Date) => {\r\n    const resetPredicate = () => {\r\n      this.predicate.forEach((value, key) => {\r\n        if (key !== 'startDate') this.predicate.delete(key)\r\n      })\r\n    }\r\n    switch (predicate) {\r\n      case 'all':\r\n        resetPredicate()\r\n        this.predicate.set('all', true)\r\n        break\r\n      case 'isGoing':\r\n        resetPredicate()\r\n        this.predicate.set('isGoing', true)\r\n        break\r\n      case 'isHost':\r\n        resetPredicate()\r\n        this.predicate.set('isHost', true)\r\n        break\r\n      case 'startDate':\r\n        this.predicate.delete('startDate') // delete key to trigger page reaction\r\n        this.predicate.set('startDate', value)\r\n    }\r\n  }\r\n\r\n  // computed property for axios query parameters\r\n  get axiosParams() {\r\n    // '/api/activities?pageNumber=1&pageSize=2'\r\n    const params = new URLSearchParams()\r\n    params.append('pageNumber', this.pagingParams.pageNumber.toString())\r\n    params.append('pageSize', this.pagingParams.pageSize.toString())\r\n    // add filters: all, startDate, isGoing, isHost\r\n    this.predicate.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, (value as Date).toISOString())\r\n      } else {\r\n        // all, isGoing, isHost\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params\r\n  }\r\n\r\n  // computed function as getter\r\n  get activitiesByDate() {\r\n    // sort the activities by date as an array\r\n    return Array.from(this.activityRegistry.values()).sort(\r\n      (a, b) => a.date!.getTime() - b.date!.getTime()\r\n    )\r\n  }\r\n\r\n  // another computed getter function\r\n  get groupedActivities() {\r\n    // return an array of [date, activities] arrays\r\n    return Object.entries(\r\n      // activities grouped by date\r\n      this.activitiesByDate.reduce((activities, activity) => {\r\n        // get the date string with date-fns\r\n        const date = format(activity.date!, 'dd MMM yyyy')\r\n        activities[date] = activities[date]\r\n          ? [...activities[date], activity]\r\n          : [activity]\r\n        return activities\r\n      }, {} as { [key: string]: Activity[] }) // {} is the initial value\r\n    )\r\n  }\r\n\r\n  // MobX Actions: class methods\r\n  loadActivities = async () => {\r\n    this.loadingInitial = true\r\n    try {\r\n      const result = await agent.Activities.list(this.axiosParams)\r\n      result.data.forEach((activity) => {\r\n        // arrow function auto-bind to \"this\" class\r\n        this.setActivity(activity)\r\n      })\r\n      this.setPagination(result.pagination)\r\n      this.setLoadingInitial(false)\r\n    } catch (error) {\r\n      console.log(error)\r\n      this.setLoadingInitial(false)\r\n    }\r\n  }\r\n\r\n  // helper method to set pagination when loading activities\r\n  setPagination = (pagination: Pagination) => {\r\n    this.pagination = pagination\r\n  }\r\n\r\n  // only MobX Action can change state\r\n  loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id)\r\n    if (activity) {\r\n      // if activity is already in MobX store, no need to load from API\r\n      this.selectedActivity = activity\r\n      return activity\r\n    } else {\r\n      this.loadingInitial = true\r\n      try {\r\n        activity = await agent.Activities.details(id)\r\n        this.setActivity(activity)\r\n        runInAction(() => {\r\n          this.selectedActivity = activity\r\n        })\r\n        this.setLoadingInitial(false)\r\n        return activity\r\n      } catch (error) {\r\n        console.log(error)\r\n        this.setLoadingInitial(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  // private helper function\r\n  private setActivity = (activity: Activity) => {\r\n    const user = store.userStore.user\r\n    // populate user properties in activity\r\n    if (user) {\r\n      // if the logged in user is in attendee's list, set isGoing to true\r\n      activity.isGoing = activity.attendees!.some(\r\n        (a) => a.username === user.username\r\n      )\r\n      activity.isHost = activity.hostUsername === user.username\r\n      activity.host = activity.attendees?.find(\r\n        (x) => x.username === activity.hostUsername\r\n      )\r\n    }\r\n\r\n    activity.date = new Date(activity.date!)\r\n    // mutating state is fine in MobX, as opposed to REDUX\r\n    // this.activities.push(activity)\r\n    this.activityRegistry.set(activity.id, activity)\r\n  }\r\n\r\n  // private helper function\r\n  private getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id)\r\n  }\r\n\r\n  setLoadingInitial = (state: boolean) => {\r\n    this.loadingInitial = state\r\n  }\r\n\r\n  createActivity = async (activity: ActivityFormValues) => {\r\n    const user = store.userStore.user\r\n    const attendee = new Profile(user!)\r\n    try {\r\n      await agent.Activities.create(activity)\r\n      // add host user when creating activity\r\n      const newActivity = new Activity(activity)\r\n      newActivity.hostUsername = user!.username\r\n      newActivity.attendees = [attendee]\r\n      // update activityRegistry\r\n      this.setActivity(newActivity)\r\n      // any state-changing steps after \"await\" need to be wrapped in action\r\n      runInAction(() => {\r\n        this.selectedActivity = newActivity\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  updateActivity = async (activity: ActivityFormValues) => {\r\n    try {\r\n      await agent.Activities.update(activity)\r\n      runInAction(() => {\r\n        if (activity.id) {\r\n          let updatedActivity = {\r\n            ...this.getActivity(activity.id),\r\n            ...activity,\r\n          }\r\n          this.activityRegistry.set(activity.id, updatedActivity as Activity)\r\n          this.selectedActivity = updatedActivity as Activity\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  deleteActivity = async (id: string) => {\r\n    this.loading = true\r\n    try {\r\n      await agent.Activities.delete(id)\r\n      runInAction(() => {\r\n        this.activityRegistry.delete(id)\r\n        this.loading = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => {\r\n        this.loading = false\r\n      })\r\n    }\r\n  }\r\n\r\n  // toggle attencance status\r\n  updateAttendance = async () => {\r\n    const user = store.userStore.user\r\n    this.loading = true\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id)\r\n      runInAction(() => {\r\n        if (this.selectedActivity?.isGoing) {\r\n          // if user is quitting, then remove user from attendees list\r\n          this.selectedActivity.attendees =\r\n            this.selectedActivity.attendees?.filter(\r\n              (a) => a.username !== user?.username\r\n            )\r\n          this.selectedActivity.isGoing = false\r\n        } else {\r\n          // if a user is signning up, create a new profile for this user\r\n          // Instanciating Profile class will convert the object interface from User to Profile\r\n          const attendee = new Profile(user!)\r\n          this.selectedActivity?.attendees?.push(attendee)\r\n          this.selectedActivity!.isGoing = true\r\n        }\r\n        // update activityRegistry\r\n        this.activityRegistry.set(\r\n          this.selectedActivity!.id,\r\n          this.selectedActivity!\r\n        )\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    } finally {\r\n      // FINALLY block: always turn off the loading flag no matter what happens\r\n      runInAction(() => (this.loading = false))\r\n    }\r\n  }\r\n\r\n  // host user toggle cancel activity\r\n  cancelActivityToggle = async () => {\r\n    this.loading = true\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id)\r\n      runInAction(() => {\r\n        this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled\r\n        this.activityRegistry.set(\r\n          this.selectedActivity!.id,\r\n          this.selectedActivity!\r\n        )\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    } finally {\r\n      runInAction(() => (this.loading = false))\r\n    }\r\n  }\r\n\r\n  clearSelectedActivity = () => {\r\n    this.selectedActivity = undefined\r\n  }\r\n\r\n  updateAttendeeFollowing = (username: string) => {\r\n    // loop over all attendees in each activity\r\n    this.activityRegistry.forEach((activity) => {\r\n      activity.attendees.forEach((attendee) => {\r\n        if (attendee.username === username) {\r\n          // if already following, decrease followers count by one, otherwise increase by one\r\n          attendee.following\r\n            ? attendee.followersCount--\r\n            : attendee.followersCount++\r\n          // toggle following status\r\n          attendee.following = !attendee.following\r\n        }\r\n      })\r\n    })\r\n  }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from 'mobx'\r\nimport agent from '../api/agent'\r\nimport { Photo, Profile, UserActivity } from '../models/profile'\r\nimport { store } from './store'\r\n\r\nexport default class ProfileStore {\r\n  profile: Profile | null = null\r\n  loadingProfile = false\r\n  uploading = false\r\n  loading = false\r\n  followings: Profile[] = []\r\n  loadingFollowings = false\r\n  activeTab = 0\r\n  userActivities: UserActivity[] = []\r\n  loadingActivities = false\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n    // mobx reaction\r\n    reaction(\r\n      () => this.activeTab,\r\n      // there are 5 tabs in the profile screen\r\n      activeTab => {\r\n        // tab4(i=3): followers, tab5(i=4): followings\r\n        if (activeTab === 3 || activeTab === 4) {\r\n          const predicate = activeTab === 3 ? 'followers' : 'following'\r\n          this.loadFollowings(predicate)\r\n        } else {\r\n          this.followings = []\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  setActiveTab = (activeTab: any) => {\r\n    this.activeTab = activeTab\r\n  }\r\n\r\n  get isCurrentUser() {\r\n    // check if there is user in userStore and profile in profileStore\r\n    if (store.userStore.user && this.profile) {\r\n      return store.userStore.user.username === this.profile.username\r\n    }\r\n    return false\r\n  }\r\n\r\n  loadProfile = async (username: string) => {\r\n    this.loadingProfile = true\r\n    try {\r\n      // get profile from API\r\n      const profile = await agent.Profiles.get(username)\r\n      runInAction(() => {\r\n        this.profile = profile\r\n        this.loadingProfile = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      // turn off loading indicator\r\n      runInAction(() => (this.loadingProfile = false))\r\n    }\r\n  }\r\n\r\n  uploadPhoto = async (file: Blob) => {\r\n    this.uploading = true\r\n    try {\r\n      const response = await agent.Profiles.uploadPhoto(file)\r\n      const photo = response.data\r\n      runInAction(() => {\r\n        // push photo if profile is not null\r\n        if (this.profile) {\r\n          this.profile.photos?.push(photo)\r\n          if (photo.isMain && store.userStore.user) {\r\n            store.userStore.setImage(photo.url)\r\n            this.profile.image = photo.url\r\n          }\r\n        }\r\n        this.uploading = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => (this.uploading = false))\r\n    }\r\n  }\r\n\r\n  setMainPhoto = async (photo: Photo) => {\r\n    this.loading = true\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id)\r\n      store.userStore.setImage(photo.url)\r\n      runInAction(() => {\r\n        if (this.profile && this.profile.photos) {\r\n          this.profile.photos.find((p) => p.isMain)!.isMain = false\r\n          this.profile.photos.find((p) => p.id === photo.id)!.isMain = true\r\n          this.profile.image = photo.url\r\n          this.loading = false\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => (this.loading = false))\r\n    }\r\n  }\r\n\r\n  deletePhoto = async (photo: Photo) => {\r\n    this.loading = true\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id)\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          // remove the photo from profile\r\n          this.profile.photos = this.profile.photos?.filter(\r\n            (p) => p.id !== photo.id\r\n          )\r\n          this.loading = false\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => (this.loading = false))\r\n    }\r\n  }\r\n\r\n  // Partial<Profile>: only update 2 of the properties in Profile type\r\n  updateProfile = async (profile: Partial<Profile>) => {\r\n    this.loading = true\r\n    try {\r\n      await agent.Profiles.updateProfile(profile)\r\n      runInAction(() => {\r\n        if (\r\n          profile.displayName &&\r\n          profile.displayName !== store.userStore.user?.displayName\r\n        ) {\r\n          store.userStore.setDisplayName(profile.displayName)\r\n        }\r\n        // overwrite the existing profile with the Partial profile passed in\r\n        this.profile = { ...this.profile, ...(profile as Profile) } // \"as Profile\" to make TypeScript happy\r\n        this.loading = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => (this.loading = false))\r\n    }\r\n  }\r\n\r\n  // toggle following status\r\n  updateFollowing = async (username: string, following: boolean) => {\r\n    this.loading = true\r\n    try {\r\n      // send post request to toggle following status\r\n      await agent.Profiles.updateFollowing(username)\r\n      // update attendee\r\n      store.activityStore.updateAttendeeFollowing(username)\r\n      runInAction(() => {\r\n        if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n          // if follow btn clicked, increase follower by one; if unfollow clicked, decrease follower by one\r\n          following ? this.profile.followersCount++ : this.profile.followersCount--\r\n          this.profile.following = !this.profile.following\r\n        }\r\n        // handle current user following count\r\n        if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n          following ? this.profile.followingCount++ : this.profile.followingCount--\r\n        }\r\n        this.followings.forEach(profile => {\r\n          if (profile.username === username) {\r\n            // profile.following is what the following status currently is\r\n            // if already following, decreaase followersCount by one; otherwise increase by one\r\n            profile.following ? profile.followersCount-- : profile.followersCount++\r\n            profile.following = !profile.following\r\n          }\r\n        })\r\n        this.loading = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => this.loading = false)\r\n    }\r\n  }\r\n\r\n  // get a list of followers or followees. don't need username as the list is on a particular user's profile page\r\n  loadFollowings = async (predicate: string) => {\r\n    this.loadingFollowings = true\r\n    try {\r\n      const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate)\r\n      runInAction(() => {\r\n        this.followings = followings\r\n        this.loadingFollowings = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => this.loadingFollowings = false)\r\n    }\r\n  }\r\n\r\n  // get activities by user and predicate (past, future, hosting)\r\n  loadUserActivities = async (username: string, predicate?: string) => {\r\n    this.loadingActivities = true\r\n    try {\r\n      const activities = await agent.Profiles.listActivities(username, predicate!)\r\n      runInAction(() => {\r\n        this.userActivities = activities\r\n        this.loadingActivities = false\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n      runInAction(() => {\r\n        this.loadingActivities = false\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { makeAutoObservable, runInAction } from 'mobx'\r\nimport { history } from '../..'\r\nimport agent from '../api/agent'\r\nimport { User, UserFormValues } from '../models/user'\r\nimport { store } from './store'\r\n\r\nexport default class UserStore {\r\n  user: User | null = null\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  // computed property to check if user is logged in\r\n  get isLoggedIn() {\r\n    return !!this.user\r\n  }\r\n\r\n  login = async (creds: UserFormValues) => {\r\n    try {\r\n      const user = await agent.Account.login(creds)\r\n      // save the token in common store\r\n      store.commonStore.setToken(user.token)\r\n      // observable can only be modified inside an action\r\n      runInAction(() => (this.user = user))\r\n      history.push('/activities')\r\n      store.modalStore.closeModal()\r\n    } catch (error) {\r\n      throw error\r\n    }\r\n  }\r\n\r\n  logout = () => {\r\n    store.commonStore.setToken(null)\r\n    window.localStorage.removeItem('jwt')\r\n    this.user = null\r\n    history.push('/')\r\n  }\r\n\r\n  // get the user that matches the token\r\n  getUser = async () => {\r\n    try {\r\n      const user = await agent.Account.current()\r\n      // observable can only be modified inside an action\r\n      runInAction(() => (this.user = user))\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  register = async (creds: UserFormValues) => {\r\n    try {\r\n      const user = await agent.Account.register(creds)\r\n      // save the token in common store\r\n      store.commonStore.setToken(user.token)\r\n      // modify an observable inside an action\r\n      runInAction(() => (this.user = user))\r\n      history.push('/activities')\r\n      store.modalStore.closeModal()\r\n    } catch (error) {\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // store photo url in \"user.image\"\r\n  setImage = (image: string) => {\r\n    if (this.user) this.user.image = image\r\n  }\r\n\r\n  // set the display name\r\n  setDisplayName = (name: string) => {\r\n    if (this.user) this.user.displayName = name\r\n  }\r\n}\r\n","import { createContext, useContext } from 'react'\r\nimport ActivityStore from './activityStore'\r\nimport CommentStore from './commentStore'\r\nimport CommonStore from './commonStore'\r\nimport ModalStore from './modalStore'\r\nimport ProfileStore from './profileStore'\r\nimport UserStore from './userStore'\r\n\r\ninterface Store {\r\n  // ActivityStore CLASS can be used as TYPE\r\n  activityStore: ActivityStore\r\n  commonStore: CommonStore\r\n  userStore: UserStore\r\n  modalStore: ModalStore\r\n  profileStore: ProfileStore\r\n  commentStore: CommentStore\r\n}\r\n\r\n// store will be used in React context provider HOC\r\nexport const store: Store = {\r\n  activityStore: new ActivityStore(),\r\n  commonStore: new CommonStore(),\r\n  userStore: new UserStore(),\r\n  modalStore: new ModalStore(),\r\n  profileStore: new ProfileStore(),\r\n  commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store)\r\n\r\n// React hook useContext\r\nexport function useStore() {\r\n  return useContext(StoreContext)\r\n}\r\n","import { makeAutoObservable, reaction } from 'mobx'\r\nimport { ServerError } from './../models/serverError'\r\n\r\nexport default class CommonStore {\r\n  // error is made an observable\r\n  error: ServerError | null = null\r\n  // store the token in common store\r\n  token: string | null = window.localStorage.getItem('jwt')\r\n  appLoaded = false\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n    // use mobx \"reaction\" function to persist login status\r\n    // reaction function only runs if \"this.token\" changes\r\n    reaction(\r\n      // list what we want to react to: this.token\r\n      () => this.token,\r\n      token => {\r\n        if (token) {\r\n          window.localStorage.setItem('jwt', token)\r\n        } else {\r\n          window.localStorage.removeItem('jwt')\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  setServerError = (error: ServerError) => {\r\n    this.error = error\r\n  }\r\n\r\n  setToken = (token: string | null) => {\r\n    this.token = token\r\n  }\r\n\r\n  setAppLoaded = () => {\r\n    this.appLoaded = true\r\n  }\r\n}\r\n","import { makeAutoObservable } from 'mobx'\r\n\r\ninterface Modal {\r\n  open: boolean\r\n  body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n  modal: Modal = {\r\n    open: false,\r\n    body: null,\r\n  }\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  openModal = (content: JSX.Element) => {\r\n    this.modal.open = true\r\n    this.modal.body = content\r\n  }\r\n\r\n  closeModal = () => {\r\n    this.modal.open = false\r\n    this.modal.body = null\r\n  }\r\n}\r\n","import {\r\n  HubConnection,\r\n  HubConnectionBuilder,\r\n  LogLevel,\r\n} from '@microsoft/signalr'\r\nimport { makeAutoObservable, runInAction } from 'mobx'\r\nimport { ChatComment } from '../models/comment'\r\nimport { store } from './store'\r\n\r\n// use SignalR to connect to server via web socket\r\nexport default class CommentStore {\r\n  comments: ChatComment[] = []\r\n  hubConnection: HubConnection | null = null\r\n\r\n  constructor() {\r\n    // comments and hubConnection are marked as observables\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  // create a new hub connection\r\n  createHubConnection = (activityId: string) => {\r\n    // before making connection, check that we have a selected activity in activity store\r\n    if (store.activityStore.selectedActivity) {\r\n      this.hubConnection = new HubConnectionBuilder()\r\n        .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n          accessTokenFactory: () => store.userStore.user?.token!,\r\n        })\r\n        .withAutomaticReconnect() // reconnect to chat hub if connection is lost\r\n        .configureLogging(LogLevel.Information)\r\n        .build()\r\n      // start connection\r\n      this.hubConnection\r\n        .start() // .start() returns a promise\r\n        .catch((error) =>\r\n          console.log('Error establishing the connection: ', error)\r\n        )\r\n      // once connected, we will receive all comments under that activity ID\r\n      // method name \"LoadComments\" needs to match exactly in SignalR (ChatHub.cs)\r\n      this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n        // update observable inside our store\r\n        runInAction(() => {\r\n          // convert the ISOString to Date object\r\n          comments.forEach((comment) => {\r\n            // 'Z' at the end of ISO String means UTC time\r\n            comment.createdAt = new Date(comment.createdAt + 'Z')\r\n          })\r\n          this.comments = comments\r\n        })\r\n      })\r\n\r\n      // when a new comment is received, update observable inside store\r\n      // method name \"ReceiveComment\" needs to match exactly in SignalR (ChatHub.cs)\r\n      this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n        // push new comment to store\r\n        runInAction(() => {\r\n          comment.createdAt = new Date(comment.createdAt)\r\n          // unshift: place the new comment at the start of the array, latest comment at the top\r\n          this.comments.unshift(comment)\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  // stop hub connection\r\n  stopHubConnection = () => {\r\n    this.hubConnection\r\n      ?.stop() // .stop() returns a promise\r\n      .catch((error) => console.log('Error stopping connection: ', error))\r\n  }\r\n\r\n  // cleanup: clear comments when user disconnects the activity\r\n  clearComments = () => {\r\n    this.comments = []\r\n    this.stopHubConnection()\r\n  }\r\n\r\n  // add new comment\r\n  addComment = async (values: any) => {\r\n    values.activityId = store.activityStore.selectedActivity?.id\r\n    try {\r\n      // invoke the 'SendComment' method inside ChatHub.cs\r\n      await this.hubConnection?.invoke('SendComment', values)\r\n      // then on 'ReceiveComment', all connected users will get new comment back from server and push it to this.comments array\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store'\r\n\r\nconst NavBar = () => {\r\n  const {\r\n    userStore: { user, logout },\r\n  } = useStore()\r\n  return (\r\n    <Menu inverted fixed='top'>\r\n      <Container>\r\n        <Menu.Item as={NavLink} exact to='/' header>\r\n          <img\r\n            src='/assets/logo.png'\r\n            alt='logo'\r\n            style={{ marginRight: '10px' }}\r\n          />\r\n          Reactivities\r\n        </Menu.Item>\r\n        <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n        <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n        <Menu.Item>\r\n          <Button\r\n            as={NavLink}\r\n            to='/createActivity'\r\n            positive\r\n            content='Create Activity'\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Item position='right'>\r\n          <Image\r\n            src={user?.image || '/assets/user.png'}\r\n            avatar\r\n            spaced='right'\r\n          />\r\n          <Dropdown pointing='top left' text={user?.displayName}>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item\r\n                as={Link}\r\n                to={`/profiles/${user?.username}`}\r\n                text='My Profile'\r\n                icon='user'\r\n              />\r\n              <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default observer(NavBar)\r\n","import { observer } from 'mobx-react-lite'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nconst ActivityFilters = () => {\r\n  const { activityStore: { predicate, setPredicate } } = useStore();\r\n  return (\r\n    <>\r\n      <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n        <Header icon='filter' attached color='teal' content='Filters' />\r\n        <Menu.Item\r\n          content='All Activities'\r\n          active={predicate.has('all')}\r\n          onClick={() => setPredicate('all', 'true')}\r\n        />\r\n        <Menu.Item\r\n          content=\"I'm going\"\r\n          active={predicate.has('isGoing')}\r\n          onClick={() => setPredicate('isGoing', 'true')}\r\n        />\r\n        <Menu.Item\r\n          content=\"I'm hosting\"\r\n          active={predicate.has('isHost')}\r\n          onClick={() => setPredicate('isHost', 'true')}  \r\n        />\r\n      </Menu>\r\n      <Header />\r\n      <Calendar\r\n        onChange={(date) => setPredicate('startDate', date as Date)}\r\n        value={predicate.get('startDate') || new Date()}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(ActivityFilters)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Reveal, Button } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nconst FollowButton = ({ profile }: Props) => {\r\n  const { profileStore, userStore } = useStore()\r\n  const { updateFollowing, loading } = profileStore\r\n\r\n  // don't show this follow button for the current user\r\n  if (userStore.user?.username === profile.username) return null\r\n\r\n  function handleFollow(e: SyntheticEvent, username: string) {\r\n    // prevent default click event, (because it activates a link)\r\n    e.preventDefault()\r\n    // check if already following\r\n    profile.following\r\n      ? updateFollowing(username, false) // unfollow user\r\n      : updateFollowing(username, true) // follow user\r\n  }\r\n\r\n  return (\r\n    <Reveal animated='move'>\r\n      <Reveal.Content visible style={{ width: '100%' }}>\r\n        <Button\r\n          fluid\r\n          color='teal'\r\n          content={profile.following ? 'Following' : 'Not following'}\r\n        />\r\n      </Reveal.Content>\r\n      <Reveal.Content hidden style={{ width: '100%' }}>\r\n        <Button\r\n          fluid\r\n          basic\r\n          color={profile.following ? 'red' : 'green'}\r\n          content={profile.following ? 'Unfollow' : 'Follow'}\r\n          loading={loading}\r\n          onClick={(e) => handleFollow(e, profile.username)}\r\n        />\r\n      </Reveal.Content>\r\n    </Reveal>\r\n  )\r\n}\r\n\r\nexport default observer(FollowButton)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nconst ProfileCard = ({ profile }: Props) => {\r\n  // truncate: hide the overflow text to keep card size small\r\n  function truncate(str: string | undefined) {\r\n    if (str) {\r\n      return str.length > 40 ? str.substring(0, 37) + '...' : str\r\n    }\r\n  }\r\n  return (\r\n    <Card as={Link} to={`/profiles/${profile.username}`}>\r\n      <Image src={profile.image || '/assets/user.png'} />\r\n      <Card.Content>\r\n        <Card.Header>{profile.displayName}</Card.Header>\r\n        <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Icon name='user' />\r\n        {profile.followersCount} followers\r\n      </Card.Content>\r\n      <FollowButton profile={profile} />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default observer(ProfileCard)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Link } from 'react-router-dom'\r\nimport { Image, List, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../app/models/profile'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n  attendees: Profile[]\r\n}\r\n\r\nconst ActivityListItemAttendee = ({ attendees }: Props) => {\r\n  // add a orange circular bordere around the following attendee's image\r\n  const styles = {\r\n    borderColor: 'orange',\r\n    borderWidth: 3,\r\n  }\r\n\r\n  return (\r\n    <List horizontal>\r\n      {attendees.map((attendee) => (\r\n        <Popup\r\n          hoverable\r\n          key={attendee.username}\r\n          trigger={\r\n            <List.Item\r\n              key={attendee.username}\r\n              as={Link}\r\n              to={`/profiles/${attendee.username}`}\r\n            >\r\n              <Image\r\n                size='mini'\r\n                circular\r\n                src={attendee.image || '/assets/user.png'}\r\n                bordered\r\n                style={attendee.following ? styles : null}\r\n              />\r\n            </List.Item>\r\n          }\r\n        >\r\n          <Popup.Content>\r\n            <ProfileCard profile={attendee} />\r\n          </Popup.Content>\r\n        </Popup>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default observer(ActivityListItemAttendee)\r\n","import { format } from 'date-fns'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nconst ActivityListItem = ({ activity }: Props) => {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n        {activity.isCancelled && (\r\n          <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n        )}\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n            <Item.Content>\r\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                {activity.title}\r\n              </Item.Header>\r\n              <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n              {activity.isHost && (\r\n                <Item.Description>\r\n                  <Label basic color='orange'>\r\n                    You are hosting this activity\r\n                  </Label>\r\n                </Item.Description>\r\n              )}\r\n              {activity.isGoing && !activity.isHost && (\r\n                <Item.Description>\r\n                  <Label basic color='green'>\r\n                    You are going to this activity\r\n                  </Label>\r\n                </Item.Description>\r\n              )}\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n        <span>\r\n          <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n          <Icon name='marker' /> {activity.venue}\r\n        </span>\r\n      </Segment>\r\n      <Segment secondary>\r\n        <ActivityListItemAttendee attendees={activity.attendees!} />\r\n      </Segment>\r\n      <Segment clearing>\r\n        <span>{activity.description}</span>\r\n        <Button\r\n          as={Link}\r\n          to={`/activities/${activity.id}`}\r\n          color='teal'\r\n          floated='right'\r\n          content='View'\r\n        />\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n}\r\n\r\nexport default ActivityListItem\r\n","import React, { Fragment } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Header } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\nconst ActivityList = () => {\r\n  const { activityStore } = useStore()\r\n  const { groupedActivities } = activityStore\r\n\r\n  return (\r\n    <>\r\n      {groupedActivities.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Header sub color='teal'>\r\n            {group}\r\n          </Header>\r\n          {activities.map((activity) => (\r\n            <ActivityListItem key={activity.id} activity={activity} />\r\n          ))}\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(ActivityList)\r\n","import { Segment, Button, Placeholder } from 'semantic-ui-react'\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n  return (\r\n    <>\r\n      <Placeholder fluid style={{ marginTop: 25 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='blue' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </>\r\n  )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect, useState } from 'react'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\nimport { Grid, Button, Loader } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { PagingParams } from '../../../app/models/pagination'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActitityFilters from './ActivityFilters'\r\nimport ActivityList from './ActivityList'\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder'\r\n\r\nconst ActivityDashboard = () => {\r\n  const { activityStore } = useStore()\r\n  const { loadActivities, activityRegistry, setPagingParams, pagination } =\r\n    activityStore\r\n  // local state to show loading of the next batch of activity\r\n  const [loadingNext, setLoadingNext] = useState(false)\r\n\r\n  // load next batch of activities\r\n  function handleGetNext() {\r\n    setLoadingNext(true)\r\n    setPagingParams(new PagingParams(pagination!.currentPage + 1)) // cause axios computed property to be updated\r\n    loadActivities().then(() => setLoadingNext(false))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activityRegistry.size <= 1) loadActivities()\r\n  }, [activityRegistry.size, loadActivities])\r\n\r\n  // don't load the full page loader if it is only loading next batch of activities\r\n  // if (activityStore.loadingInitial && !loadingNext) return <LoadingComponent content='Loading activities...' />\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width='10'>\r\n        {activityStore.loadingInitial && !loadingNext ? (\r\n          <>\r\n            <ActivityListItemPlaceholder />\r\n            <ActivityListItemPlaceholder />\r\n          </>\r\n        ) : (\r\n          <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={\r\n              !loadingNext &&\r\n              !!pagination &&\r\n              pagination.currentPage < pagination.totalPages\r\n            }\r\n            initialLoad={false}\r\n          >\r\n            <ActivityList />\r\n          </InfiniteScroll>\r\n        )}\r\n\r\n        {/* <Button\r\n          floated='right'\r\n          content='More...'\r\n          positive\r\n          onClick={handleGetNext}\r\n          loading={loadingNext}\r\n          disabled={pagination?.totalPages === pagination?.currentPage}\r\n        /> */}\r\n      </Grid.Column>\r\n      <Grid.Column width='6'>\r\n        <ActitityFilters />\r\n      </Grid.Column>\r\n      <Grid.Column width={10}>\r\n        <Loader active={loadingNext} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default observer(ActivityDashboard)\r\n","import { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  placeholder: string\r\n  name: string\r\n  type?: string\r\n  label?: string\r\n}\r\n\r\n// Re-usable text input field\r\nconst MyTextInput = (props: Props) => {\r\n  const [field, meta] = useField(props.name)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <input {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\nexport default MyTextInput\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst LoginForm = () => {\r\n  const { userStore } = useStore()\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '', password: '', error: null }}\r\n      onSubmit={(values, { setErrors }) =>\r\n        userStore\r\n          .login(values)\r\n          .catch((error) => setErrors({ error: 'Invalid email or password' }))\r\n      }\r\n    >\r\n      {({ handleSubmit, isSubmitting, errors }) => (\r\n        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n          <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n          <MyTextInput name='email' placeholder='Email' />\r\n          <MyTextInput name='password' placeholder='Password' type='password' />\r\n          <ErrorMessage\r\n            name='error'\r\n            render={() => (\r\n              <Label\r\n                style={{ marginBottom: 10 }}\r\n                basic\r\n                color='red'\r\n                content={errors.error}\r\n              />\r\n            )}\r\n          />\r\n          <Button\r\n            loading={isSubmitting}\r\n            positive\r\n            content='Login'\r\n            type='submit'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default observer(LoginForm)\r\n","import React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  errors: any\r\n}\r\n\r\nconst ValidationErrors = ({ errors }: Props) => {\r\n  return (\r\n    <Message error>\r\n      {errors && (\r\n        <Message.List>\r\n          {errors.map((err: any, i: any) => (\r\n            <Message.Item key={i}>{err}</Message.Item>\r\n          ))}\r\n        </Message.List>\r\n      )}\r\n    </Message>\r\n  )\r\n}\r\n\r\nexport default ValidationErrors\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors'\r\n\r\nconst RegisterForm = () => {\r\n  const { userStore } = useStore()\r\n  return (\r\n    <Formik\r\n      initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n      onSubmit={(values, { setErrors }) =>\r\n        userStore\r\n          .register(values)\r\n          .catch((error) => setErrors({ error: error }))\r\n      }\r\n      validationSchema={Yup.object({\r\n        displayName: Yup.string().required(),\r\n        username: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required(),\r\n      })}\r\n    >\r\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n        <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n          <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n          <MyTextInput name='displayName' placeholder='Display Name' />\r\n          <MyTextInput name='username' placeholder='Username' />\r\n          <MyTextInput name='email' placeholder='Email' />\r\n          <MyTextInput name='password' placeholder='Password' type='password' />\r\n          <ErrorMessage\r\n            name='error'\r\n            render={() => <ValidationErrors errors={errors.error} />}\r\n          />\r\n          <Button\r\n            disabled={!isValid || !dirty || isSubmitting}\r\n            loading={isSubmitting}\r\n            positive\r\n            content='Register'\r\n            type='submit'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default observer(RegisterForm)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport LoginForm from '../users/LoginForm'\r\nimport RegisterForm from '../users/RegisterForm'\r\n\r\nconst HomePage = () => {\r\n  const { userStore, modalStore } = useStore()\r\n  return (\r\n    <Segment inverted textAlign='center' vertical className='masthead'>\r\n      <Container text>\r\n        <Header as='h1' inverted>\r\n          <Image\r\n            size='massive'\r\n            src='/assets/logo.png'\r\n            alt='logo'\r\n            style={{ marginBottom: 12 }}\r\n          />\r\n          Reactivities\r\n        </Header>\r\n        {userStore.isLoggedIn ? (\r\n          <>\r\n            <Header as='h2' inverted content='Welcom to Reactivities' />\r\n            <Button as={Link} to='/activities' size='huge' inverted>\r\n              Go to Actvities!\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n              Login!\r\n            </Button>\r\n            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n              Register!\r\n            </Button>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default observer(HomePage)\r\n","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  inverted?: boolean\r\n  content?: string\r\n}\r\n\r\nconst LoadingComponent = ({\r\n  inverted = true,\r\n  content = 'Loading...',\r\n}: Props) => {\r\n  return (\r\n    <Dimmer active={true} inverted={inverted}>\r\n      <Loader content={content} />\r\n    </Dimmer>\r\n  )\r\n}\r\n\r\nexport default LoadingComponent\r\n","import { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  placeholder: string\r\n  name: string\r\n  rows: number\r\n  label?: string\r\n}\r\n\r\n// Re-usable text input field\r\nconst MyTextArea = (props: Props) => {\r\n  const [field, meta] = useField(props.name)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <textarea {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\nexport default MyTextArea\r\n","import { useField } from 'formik'\r\nimport { Form, Label, Select } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  placeholder: string\r\n  name: string\r\n  options: any\r\n  label?: string\r\n}\r\n\r\n// Re-usable select input\r\nconst MySelectInput = (props: Props) => {\r\n  const [field, meta, helpers] = useField(props.name)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <Select\r\n        clearable\r\n        options={props.options}\r\n        value={field.value || null}\r\n        onChange={(e, d) => {\r\n            // e: event, d: data\r\n            return helpers.setValue(d.value)\r\n        }}\r\n        onBlur={() => helpers.setTouched(true)}\r\n        placeholder={props.placeholder}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\nexport default MySelectInput\r\n","export const categoryOptions = [\r\n  { text: 'Drinks', value: 'drinks' },\r\n  { text: 'Culture', value: 'culture' },\r\n  { text: 'Film', value: 'film' },\r\n  { text: 'Food', value: 'food' },\r\n  { text: 'Music', value: 'music' },\r\n  { text: 'Travel', value: 'travel' },\r\n]\r\n","import { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react'\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker'\r\n\r\n// Re-usable date picker\r\n// Partial<ReactDatePickerProps> will make all the props optional\r\nconst MyDateInput = (props: Partial<ReactDatePickerProps>) => {\r\n  const [field, meta, helpers] = useField(props.name!)\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <DatePicker\r\n        {...field}\r\n        {...props}\r\n        selected={(field.value && new Date(field.value)) || null}\r\n        onChange={(value) => helpers.setValue(value)}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\nexport default MyDateInput\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect, useState } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom'\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from '../../../app/common/form/MyTextInput'\r\nimport MyTextArea from '../../../app/common/form/MyTextArea'\r\nimport MySelectInput from '../../../app/common/form/MySelectInput'\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions'\r\nimport MyDateInput from '../../../app/common/form/MyDateInput'\r\nimport { ActivityFormValues } from '../../../app/models/activity'\r\n\r\nconst ActivityForm = () => {\r\n  const { activityStore } = useStore()\r\n  const {\r\n    createActivity,\r\n    updateActivity,\r\n    loadActivity,\r\n    loadingInitial,\r\n  } = activityStore\r\n  const { id } = useParams<{ id: string }>()\r\n  const history = useHistory()\r\n\r\n  const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues())\r\n\r\n  const validationSchema = Yup.object({\r\n    title: Yup.string().required('The activity title is required'),\r\n    description: Yup.string().required('The activity description is required'),\r\n    category: Yup.string().required(),\r\n    date: Yup.string().required('Date is required').nullable(),\r\n    venue: Yup.string().required(),\r\n    city: Yup.string().required(),\r\n  })\r\n\r\n  useEffect(() => {\r\n    // activity contains the values from form\r\n    if (id) loadActivity(id).then((activity) => setActivity(new ActivityFormValues(activity)))\r\n  }, [id, loadActivity])\r\n\r\n  const handleFormSubmit = (activity: ActivityFormValues) => {\r\n    if (!activity.id) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid(),\r\n      }\r\n      createActivity(newActivity).then(() =>\r\n        history.push(`/activities/${newActivity.id}`)\r\n      )\r\n    } else {\r\n      updateActivity(activity).then(() =>\r\n        history.push(`/activities/${activity.id}`)\r\n      )\r\n    }\r\n  }\r\n\r\n  if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Header content='Activity Details' sub color='teal' />\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        enableReinitialize\r\n        initialValues={activity}\r\n        onSubmit={(values) => handleFormSubmit(values)}\r\n      >\r\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n          <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n            <MyTextInput name='title' placeholder='Title' />\r\n            <MyTextArea rows={3} placeholder='Description' name='description' />\r\n            <MySelectInput\r\n              options={categoryOptions}\r\n              placeholder='Category'\r\n              name='category'\r\n            />\r\n            <MyDateInput\r\n              placeholderText='Date'\r\n              name='date'\r\n              showTimeSelect\r\n              timeCaption='time'\r\n              dateFormat='d MMMM yyyy, h:mm aa'\r\n            />\r\n            <Header content='Location Details' sub color='teal' />\r\n            <MyTextInput placeholder='City' name='city' />\r\n            <MyTextInput placeholder='Venue' name='venue' />\r\n            <Button\r\n              disabled={isSubmitting || !dirty || !isValid}\r\n              loading={isSubmitting}\r\n              floated='right'\r\n              positive\r\n              type='submit'\r\n              content='Submit'\r\n            />\r\n            <Button\r\n              as={Link}\r\n              to='/activities'\r\n              floated='right'\r\n              type='button'\r\n              content='Cancel'\r\n            />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default observer(ActivityForm)\r\n","import { Formik, Form, FieldProps, Field } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface Props {\r\n  activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n  // connect to commentStore\r\n  const { commentStore } = useStore()\r\n\r\n  useEffect(() => {\r\n    // create hub connection\r\n    if (activityId) {\r\n      commentStore.createHubConnection(activityId)\r\n    }\r\n    // clean up: close down connection when unmounted\r\n    return () => {\r\n      commentStore.clearComments()\r\n    }\r\n  }, [commentStore, activityId])\r\n\r\n  return (\r\n    <>\r\n      <Segment\r\n        textAlign='center'\r\n        attached='top'\r\n        inverted\r\n        color='teal'\r\n        style={{ border: 'none' }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached clearing>\r\n        <Formik\r\n          onSubmit={(values, { resetForm }) =>\r\n            commentStore.addComment(values).then(() => resetForm())\r\n          }\r\n          initialValues={{ body: '' }}\r\n          validationSchema={Yup.object({\r\n            body: Yup.string().required(),\r\n          })}\r\n        >\r\n          {({ isSubmitting, isValid, handleSubmit }) => (\r\n            <Form className='ui form'>\r\n              <Field name='body'>\r\n                {(props: FieldProps) => (\r\n                  <div style={{ position: 'relative' }}>\r\n                    <Loader active={isSubmitting} />\r\n                    <textarea\r\n                      placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                      rows={2}\r\n                      {...props.field}\r\n                      onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' && e.shiftKey) return\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                          e.preventDefault()\r\n                          isValid && handleSubmit()\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </Field>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        <Comment.Group>\r\n          {commentStore.comments.map((comment) => (\r\n            <Comment key={comment.id}>\r\n              <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n              <Comment.Content>\r\n                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                  {comment.displayName}\r\n                </Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                </Comment.Metadata>\r\n                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>\r\n                  {comment.body}\r\n                </Comment.Text>\r\n              </Comment.Content>\r\n            </Comment>\r\n          ))}\r\n        </Comment.Group>\r\n      </Segment>\r\n    </>\r\n  )\r\n})\r\n","import { format } from 'date-fns'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\n// dimming the image to show white text\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)',\r\n}\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white',\r\n}\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n  const {\r\n    activityStore: { updateAttendance, loading, cancelActivityToggle },\r\n  } = useStore()\r\n  return (\r\n    <Segment.Group>\r\n      <Segment basic attached='top' style={{ padding: '0' }}>\r\n        {activity.isCancelled && (\r\n          <Label\r\n            style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n            ribbon\r\n            color='red'\r\n            content='Cancelled'\r\n          />\r\n        )}\r\n        <Image\r\n          src={`/assets/categoryImages/${activity.category}.jpg`}\r\n          fluid\r\n          style={activityImageStyle}\r\n        />\r\n        <Segment style={activityImageTextStyle} basic>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content>\r\n                <Header\r\n                  size='huge'\r\n                  content={activity.title}\r\n                  style={{ color: 'white' }}\r\n                />\r\n                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                <p>\r\n                  Hosted by{' '}\r\n                  <strong>\r\n                    <Link to={`/profiles/${activity.host?.username}`}>\r\n                      {activity.host?.displayName}\r\n                    </Link>\r\n                  </strong>\r\n                </p>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Segment>\r\n      <Segment clearing attached='bottom'>\r\n        {activity.isHost ? (\r\n          <>\r\n            <Button\r\n              color={activity.isCancelled ? 'green' : 'red'}\r\n              floated='left'\r\n              basic\r\n              content={\r\n                activity.isCancelled\r\n                  ? 'Re-activate Activity'\r\n                  : 'Cancel Activity'\r\n              }\r\n              onClick={cancelActivityToggle}\r\n              loading={loading}\r\n            />\r\n            <Button\r\n              disabled={activity.isCancelled}\r\n              as={Link}\r\n              to={`/manage/${activity.id}`}\r\n              color='orange'\r\n              floated='right'\r\n            >\r\n              Manage Event\r\n            </Button>\r\n          </>\r\n        ) : activity.isGoing ? (\r\n          <Button loading={loading} onClick={updateAttendance}>\r\n            Cancel attendance\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            disabled={activity.isCancelled}\r\n            loading={loading}\r\n            onClick={updateAttendance}\r\n            color='teal'\r\n          >\r\n            Join Activity\r\n          </Button>\r\n        )}\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport { format } from 'date-fns'\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment attached='top'>\r\n        <Grid>\r\n          <Grid.Column width={1}>\r\n            <Icon size='large' color='teal' name='info' />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <p>{activity.description}</p>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign='middle'>\r\n          <Grid.Column width={1}>\r\n            <Icon name='calendar' size='large' color='teal' />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign='middle'>\r\n          <Grid.Column width={1}>\r\n            <Icon name='marker' size='large' color='teal' />\r\n          </Grid.Column>\r\n          <Grid.Column width={11}>\r\n            <span>\r\n              {activity.venue}, {activity.city}\r\n            </span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({\r\n  activity: { attendees, host },\r\n}: Props) {\r\n  if (!attendees) return null\r\n  return (\r\n    <>\r\n      <Segment\r\n        textAlign='center'\r\n        style={{ border: 'none' }}\r\n        attached='top'\r\n        secondary\r\n        inverted\r\n        color='teal'\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map((attendee) => (\r\n            <Item style={{ position: 'relative' }} key={attendee.username}>\r\n              {attendee.username === host?.username && (\r\n                <Label\r\n                  style={{ position: 'absolute' }}\r\n                  color='orange'\r\n                  ribbon='right'\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Item.Header as='h3'>\r\n                  <Link to={`/profiles/${attendee.username}`}>\r\n                    {attendee.displayName}\r\n                  </Link>\r\n                </Item.Header>\r\n                {attendee.following && (\r\n                  <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                )}\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n        </List>\r\n      </Segment>\r\n    </>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport ActivityDetailedChat from './ActivityDetailedChat'\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader'\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo'\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar'\r\n\r\nconst ActivityDetails = () => {\r\n  const { activityStore } = useStore()\r\n  const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id)\r\n    return () => clearSelectedActivity()\r\n  }, [clearSelectedActivity, id, loadActivity])\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent />\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity} />\r\n        <ActivityDetailedChat activityId={activity.id} />\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSidebar activity={activity} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default observer(ActivityDetails)\r\n","import React, { useState } from 'react'\r\nimport { Button, Header, Segment } from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport ValidationErrors from './ValidationErrors'\r\n\r\nexport default function TestErrors() {\r\n  const baseUrl = process.env.REACT_APP_API_URL\r\n  const [errors, setErrors] = useState(null)\r\n\r\n  function handleNotFound() {\r\n    axios\r\n      .get(baseUrl + 'buggy/not-found')\r\n      .catch((err) => console.log(err.response))\r\n  }\r\n\r\n  function handleBadRequest() {\r\n    axios\r\n      .get(baseUrl + 'buggy/bad-request')\r\n      .catch((err) => console.log(err.response))\r\n  }\r\n\r\n  function handleServerError() {\r\n    axios\r\n      .get(baseUrl + 'buggy/server-error')\r\n      .catch((err) => console.log(err.response))\r\n  }\r\n\r\n  function handleUnauthorised() {\r\n    axios\r\n      .get(baseUrl + 'buggy/unauthorised')\r\n      .catch((err) => console.log(err.response))\r\n  }\r\n\r\n  function handleBadGuid() {\r\n    axios\r\n      .get(baseUrl + 'activities/notaguid')\r\n      .catch((err) => console.log(err))\r\n  }\r\n\r\n  function handleValidationError() {\r\n    axios.post(baseUrl + 'activities', {}).catch((err) => setErrors(err))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header as='h1' content='Test Error component' />\r\n      <Segment>\r\n        <Button.Group widths='7'>\r\n          <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n          <Button\r\n            onClick={handleBadRequest}\r\n            content='Bad Request'\r\n            basic\r\n            primary\r\n          />\r\n          <Button\r\n            onClick={handleValidationError}\r\n            content='Validation Error'\r\n            basic\r\n            primary\r\n          />\r\n          <Button\r\n            onClick={handleServerError}\r\n            content='Server Error'\r\n            basic\r\n            primary\r\n          />\r\n          <Button\r\n            onClick={handleUnauthorised}\r\n            content='Unauthorised'\r\n            basic\r\n            primary\r\n          />\r\n          <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n        </Button.Group>\r\n      </Segment>\r\n      {errors && <ValidationErrors errors={errors} />}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name='search' />\r\n        Oops - we've looked everywhere and could not find this.\r\n      </Header>\r\n      <Segment.Inline>\r\n        <Button as={Link} to='/activities' primary>\r\n          Return to activities page\r\n        </Button>\r\n      </Segment.Inline>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default NotFound\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst ServerError = () => {\r\n  const { commonStore } = useStore()\r\n  return (\r\n    <Container>\r\n      <Header as='h1' content='Server Error' />\r\n      <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n      {commonStore.error?.details && (\r\n        <Segment>\r\n          <Header as='h4' content='Stack trace' color='teal' />\r\n          <code style={{ marginTop: 10 }}>{commonStore.error.details}</code>\r\n        </Segment>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default observer(ServerError)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { useStore } from '../../stores/store'\r\n\r\nconst ModalContainer = () => {\r\n  const { modalStore } = useStore()\r\n  return (\r\n    <Modal\r\n      open={modalStore.modal.open}\r\n      onClose={modalStore.closeModal}\r\n      size='mini'\r\n    >\r\n      <Modal.Content>{modalStore.modal.body}</Modal.Content>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default observer(ModalContainer)\r\n","import { Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Button } from 'semantic-ui-react'\r\nimport MyTextArea from '../../app/common/form/MyTextArea'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\n\r\ninterface Props {\r\n  setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n  const {\r\n    profileStore: { profile, updateProfile },\r\n  } = useStore()\r\n  return (\r\n    <Formik\r\n      initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n      onSubmit={(values) => {\r\n        updateProfile(values).then(() => {\r\n          // we can turn off the edit mode once the submission is complete\r\n          setEditMode(false)\r\n        })\r\n      }}\r\n      validationSchema={Yup.object({\r\n        displayName: Yup.string().required(),\r\n      })}\r\n    >\r\n      {({ isSubmitting, isValid, dirty }) => (\r\n        <Form className='ui form'>\r\n          <MyTextInput placeholder='Display Name' name='displayName' />\r\n          <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n          <Button\r\n            positive\r\n            type='submit'\r\n            loading={isSubmitting}\r\n            content='Update profile'\r\n            floated='right'\r\n            disabled={!isValid || !dirty}\r\n          />\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n})\r\n","import React, { useState } from 'react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react'\r\nimport ProfileEditForm from './ProfileEditForm'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function ProfileAbout() {\r\n  const { profileStore } = useStore()\r\n  const { isCurrentUser, profile } = profileStore\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width='16'>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={`About ${profile?.displayName}`}\r\n          />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              basic\r\n              content={editMode ? 'Cancel' : 'Edit Profile'}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width='16'>\r\n          {editMode ? (\r\n            <ProfileEditForm setEditMode={setEditMode} />\r\n          ) : (\r\n            // the style \"whiteSpace: 'pre-wrap'\" will preserve line breaks that are entered into the text area here.\r\n            <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  )\r\n})\r\n","import { SyntheticEvent, useEffect } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { UserActivity } from '../../app/models/profile'\r\nimport { format } from 'date-fns'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'future' } },\r\n  { menuItem: 'Past Events', pane: { key: 'past' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n]\r\n\r\nexport default observer(function ProfileActivities() {\r\n  const { profileStore } = useStore()\r\n  const { loadUserActivities, profile, loadingActivities, userActivities } =\r\n    profileStore\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.username)\r\n  }, [loadUserActivities, profile])\r\n\r\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n    loadUserActivities(\r\n      profile!.username,\r\n      panes[data.activeIndex as number].pane.key\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Activities'} />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: UserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard'\r\n\r\nconst ProfileFollowings = () => {\r\n  const { profileStore } = useStore()\r\n  const { profile, followings, loadingFollowings, activeTab } = profileStore\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingFollowings}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Card.Group itemsPerRow={4}>\r\n            {followings.map((profile) => (\r\n              <ProfileCard key={profile.username} profile={profile} />\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  )\r\n}\r\n\r\nexport default observer(ProfileFollowings)\r\n","import React from 'react'\r\nimport { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n  imagePreview: string\r\n  setCropper: (cropper: Cropper) => void\r\n}\r\n\r\nconst PhotoWidgetCropper = ({ imagePreview, setCropper }: Props) => {\r\n  return (\r\n    <Cropper\r\n      src={imagePreview}\r\n      style={{ height: 200, width: '100%' }}\r\n      initialAspectRatio={1}\r\n      aspectRatio={1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      autoCropArea={1}\r\n      background={false}\r\n      onInitialized={(cropper) => setCropper(cropper)}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PhotoWidgetCropper\r\n","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void\r\n}\r\n\r\nconst PhotoWidgetDropzone = ({ setFiles }: Props) => {\r\n  // style of inactive dropzone\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: 5,\r\n    paddingTop: 30,\r\n    textAlign: 'center' as 'center',\r\n    height: 200,\r\n  }\r\n\r\n  // style of active dropzone\r\n  const dzActive = {\r\n    ...dzStyles,\r\n    borderColor: 'green',\r\n  }\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    // Preview: store the image URL (blob in memory?) into property \"file.preview\"\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? dzActive : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PhotoWidgetDropzone\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper'\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props {\r\n  loading: boolean\r\n  uploadPhoto: (file: Blob) => void\r\n}\r\n\r\nconst PhotoUploadWidget = ({ loading, uploadPhoto }: Props) => {\r\n  const [files, setFiles] = useState<any>([])\r\n  const [cropper, setCropper] = useState<Cropper>()\r\n\r\n  function onCrop() {\r\n    // check if there is cropper set\r\n    if (cropper) {\r\n      cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!))\r\n    }\r\n  }\r\n\r\n  // clean up preview blob in memory\r\n  useEffect(() => {\r\n    return () => {\r\n      files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n    }\r\n  }, [files])\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={4}>\r\n        <Header sub color='teal' content='Step 1 - Add Photo' />\r\n        <PhotoWidgetDropzone setFiles={setFiles} />\r\n      </Grid.Column>\r\n      <Grid.Column width={1} />\r\n      <Grid.Column width={4}>\r\n        <Header sub color='teal' content='Step 2 - Resize ihoto' />\r\n        {files && files.length > 0 && (\r\n          <PhotoWidgetCropper\r\n            setCropper={setCropper}\r\n            imagePreview={files[0].preview}\r\n          />\r\n        )}\r\n      </Grid.Column>\r\n      <Grid.Column width={1} />\r\n      <Grid.Column width={4}>\r\n        <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n        {files && files.length > 0 && (\r\n          <>\r\n            <div\r\n              className='img-preview'\r\n              style={{ minHeight: 200, overflow: 'hidden' }}\r\n            />\r\n            <Button.Group widths={2}>\r\n              <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n              <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n            </Button.Group>\r\n          </>\r\n        )}\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default PhotoUploadWidget\r\n","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nconst ProfilePhotos = ({ profile }: Props) => {\r\n  const {\r\n    profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto },\r\n  } = useStore()\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false)\r\n  const [target, setTarget] = useState('')\r\n\r\n  function handlePhotoUpload(file: Blob) {\r\n    uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n  }\r\n\r\n  // event parameter need React's SyntheticEvent interface\r\n  function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n    // set target for the loader: which button will show loading icon\r\n    setTarget(e.currentTarget.name)\r\n    setMainPhoto(photo)\r\n  }\r\n\r\n  function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n    setTarget(e.currentTarget.name)\r\n    // pass the photo to ProfileStore\r\n    deletePhoto(photo)\r\n  }\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='image' content='Photos' />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              basic\r\n              content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile.photos?.map((photo) => (\r\n                <Card key={photo.id}>\r\n                  <Image src={photo.url} />\r\n                  {isCurrentUser && (\r\n                    <Button.Group fluid widths={2}>\r\n                      <Button\r\n                        basic\r\n                        color='green'\r\n                        content='Main'\r\n                        name={'main' + photo.id}\r\n                        disabled={photo.isMain}\r\n                        loading={target === 'main' + photo.id && loading}\r\n                        onClick={e => handleSetMainPhoto(photo, e)}\r\n                      />\r\n                      <Button\r\n                        basic\r\n                        color='red'\r\n                        icon='trash'\r\n                        name={photo.id}\r\n                        disabled={photo.isMain}\r\n                        loading={target === photo.id && loading}\r\n                        onClick={e => handleDeletePhoto(photo, e)}\r\n                      />\r\n                    </Button.Group>\r\n                  )}\r\n                </Card>\r\n              ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  )\r\n}\r\n\r\nexport default observer(ProfilePhotos)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileActivities from './ProfileActivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nconst ProfileContent = ({ profile }: Props) => {\r\n  const { profileStore } = useStore()\r\n  \r\n  const panes = [\r\n    { menuItem: 'About', render: () => <ProfileAbout /> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n    { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n    { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n    { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n  ]\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition='right'\r\n      panes={panes}\r\n      onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n    />\r\n  )\r\n}\r\n\r\nexport default observer(ProfileContent)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props {\r\n  profile: Profile\r\n}\r\n\r\nconst ProfileHeader = ({ profile }: Props) => {\r\n  return (\r\n    <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Header as='h1' content={profile.displayName} />\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Statistic.Group widths={2}>\r\n            <Statistic label='Followers' value={profile.followersCount} />\r\n            <Statistic label='Following' value={profile.followingCount} />\r\n          </Statistic.Group>\r\n          <Divider />\r\n          <FollowButton profile={profile} />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default observer(ProfileHeader)\r\n","import { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../app/layout/LoadingComponent'\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nconst ProfilePage = () => {\r\n  // useParams need generic type to return username as property\r\n  const { username } = useParams<{ username: string }>()\r\n  const { profileStore } = useStore()\r\n  const { loadProfile, loadingProfile, profile, setActiveTab } = profileStore\r\n\r\n  useEffect(() => {\r\n    // load user profile after render\r\n    loadProfile(username)\r\n    // on disposal, reset active tab in profile store\r\n    return () => {\r\n      setActiveTab(0)\r\n    }\r\n  }, [loadProfile, username, setActiveTab])\r\n\r\n  if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        {profile && (\r\n          <>\r\n            <ProfileHeader profile={profile} />\r\n            <ProfileContent profile={profile} />\r\n          </>\r\n        )}\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default observer(ProfilePage)\r\n","import React from 'react'\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom'\r\nimport { useStore } from '../stores/store'\r\n\r\n// this component will protect frontend routes from unauthorised users\r\n\r\ninterface Props extends RouteProps {\r\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }: Props) => {\r\n  const {\r\n    userStore: { isLoggedIn },\r\n  } = useStore()\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute\r\n","import { useEffect } from 'react'\nimport { Container } from 'semantic-ui-react'\nimport NavBar from './NavBar'\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard'\nimport { observer } from 'mobx-react-lite'\nimport { Route, Switch, useLocation } from 'react-router-dom'\nimport HomePage from '../../features/home/HomePage'\nimport ActivityForm from '../../features/activities/form/ActivityForm'\nimport ActivityDetails from '../../features/activities/details/ActivityDetails'\nimport TestErrors from '../../features/errors/TestError'\nimport { ToastContainer } from 'react-toastify'\nimport NotFound from '../../features/errors/NotFound'\nimport ServerError from '../../features/errors/ServerError'\nimport { useStore } from '../stores/store'\nimport LoadingComponent from './LoadingComponent'\nimport ModalContainer from '../common/modals/ModalContainer'\nimport ProfilePage from '../../features/profiles/ProfilePage'\nimport PrivateRoute from './PrivateRoute'\n\nfunction App() {\n  const location = useLocation()\n  const { commonStore, userStore } = useStore()\n\n  useEffect(() => {\n    if (commonStore.token) {\n      // if there is a token in store, get current user from token and stop the spinner loader\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      // stop spinner loader\n      commonStore.setAppLoaded()\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'} \n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <Route path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  )\n}\n\n// use mobx to make App an Observer, to listen to observables in mobx\nexport default observer(App)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation()\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [pathname])\r\n\r\n  return null\r\n}\r\n\r\nexport default ScrollToTop\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css'\nimport App from './app/layout/App'\nimport reportWebVitals from './reportWebVitals'\nimport { store, StoreContext } from './app/stores/store'\nimport { createBrowserHistory } from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop'\n\n// use 'history' from 'react-router-dom' to create history object to be used outside React Components\nexport const history = createBrowserHistory()\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}